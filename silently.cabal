name: silently
version: 1.2.5.1
cabal-version: >= 1.8
build-type: Simple
license: BSD3
license-file: LICENSE
copyright: (c) Trystan Spangler 2011
maintainer: SÃ¶nke Hahn <soenkehahn@gmail.com>, Simon Hengel <sol@typeful.net>
homepage: https://github.com/hspec/silently
package-url: https://github.com/hspec/silently
bug-reports: https://github.com/hspec/silently/issues
synopsis: Prevent or capture writing to stdout and other handles.
description: Prevent or capture writing to stdout and other handles.
category: System, Testing
author: Trystan Spangler
tested-with:
  GHC == 7.0.4
  GHC == 7.2.2
  GHC == 7.4.2
  GHC == 7.6.3
  GHC == 7.8.4
  GHC == 7.10.3
  GHC == 8.0.2
  GHC == 8.2.2
  GHC == 8.4.4
  GHC == 8.6.5
  GHC == 8.8.4
  GHC == 8.10.7
  GHC == 9.0.1
  GHC == 9.2.1

source-repository head
  type: git
  location: https://github.com/hspec/silently

Library
  build-depends:
      base >=4 && <=5
    , directory
    , deepseq
  exposed-modules: System.IO.Silently

  hs-source-dirs:
      src

  if os(windows)
    cpp-options: -DWINDOWS
  if os(linux) || os(osx) || os(freebsd) || os(openbsd) || os(netbsd)
    cpp-options: -DUNIX

-- This tests the platform specific implementation.
--
-- NOTE: Cabal 1.10 can not deal with conditional (== if-else) options.  This
-- is why we depend on silently to test the platform specific implementation.
--
-- As a consequence we can not use Hspec for testing, as this would result in
-- depending on two different versions of silently at the same time!
test-suite spec-specific
  main-is:
      Spec.hs
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -threaded
  hs-source-dirs:
      test
  build-depends:
      base
    , silently
    , directory
    , nanospec
    , temporary

-- This tests the generic implementation, that should work on all platforms.
test-suite spec-generic
  main-is:
      Spec.hs
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -threaded
  hs-source-dirs:
      src
    , test

  build-depends:
      base
    , deepseq
    , directory
    , nanospec
    , temporary
